generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @unique(map: "id_UNIQUE") @db.VarChar(225)
  username            String                @db.VarChar(225)
  phone_number        String                @unique(map: "phone_number_UNIQUE") @db.VarChar(15)
  password            String                @db.VarChar(225)
  verified            Boolean               @default(false)
  profile             Profile?
  otp_verification    Otp_verification?
  poin                Poin?
  Sender              Transaction_history[] @relation("Sender")
  Recipient           Transaction_history[] @relation("Recipient")
}

model Profile {
  id              Int      @id @default(autoincrement())
  profile_picture String?
  email           String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String   @unique
}

model Otp_verification {
  id        Int      @id @default(autoincrement())
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
}

model Poin {
  id      Int     @id @default(autoincrement())
  balance Int
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String  @unique
}

model Transaction_history {
  id            Int     @id @default(autoincrement())
  transactionId String
  amount        Int
  senderId      String  @unique
  recipientId   String  @unique
  status        Status
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  sender        User    @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipient     User    @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  // Indexes
  @@index([transactionId], name: "transactionId_index")
}

enum Status {
  successful
  progress 
  failed
  cancelled
}

